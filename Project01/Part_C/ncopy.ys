#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Part C - Optimize the baseline code.
#
# Author: Cheng-Wei Lin
# Student ID: 716030220009
#
# Describe how and why you modified the baseline code.
#
# Description:
#	1. Loop unrolling.
#
#	   < How >
#	   - I copy 8 blocks of datas in 1 loop.
#	   
#	   < Why >
#	   - It uses lots of branch instructions in the loop, which is
#	     a big waste of time.
#	   - Reduce the numbers of increasing array address (src++ and
#	     dst++).  By unrolling, we only need to update the address
#	     once for 8 copies.
#
#	2. Avoid data hazard.
#
#	   < How >
#	   - In the unrolling loop, we can load 2 blocks of datas each
#	     time, following by  storing 2 blocks of  datas. This will
#	     avoid data hazard.
#	     EX:
#                  This causes data hazard
#	                         ||
#	                        _||_
#	                        \  /
#	                         \/
#	         mrmovl (%ebx), %esi           mrmovl (%ebx), %esi
#	         rmmovl %esi, (%ecx)   ---->   mrmovl 4(%ebx), %edi
#	                                       rmmovl %esi, (%ecx)
#	                                       rmmovl %edi, 4(%ecx)
#
#	   - For the remaining datas  outside the  unrolling  loop, we
#	     can't load 2 blocks of data at once because we don't know
#	     whether this is the last data in the array. Thus, we need
#	     to  increase the array address by one  for  each  copy. I
#	     reorder the instructions between  load, store and increas
#	     -ing address. This will avoid data hazard.
#	     EX:
#                  This causes data hazard
#	                         ||
#	                        _||_
#	                        \  /
#	                         \/
#	         mrmovl (%ebx), %esi           mrmovl (%ebx), %esi
#	         rmmovl %esi, (%ecx)   ---->   iaddl $4, %ebx
#	         iaddl $4, %ebx                rmmovl %esi, (%ecx)
#	         iaddl $4, %ecx                iaddl $4, %ecx
#
#	   < Why >
#	   - We need to stop one cycle  when a load word follows by an
#	     ALU operation and the source register matches the destina
#	     -tion register.
#	   - We have 1 register which is not used. This makes it possi
#	     -ble to implement loading 2 block of data at once.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl	%eax, %eax		# count = 0;
	iaddl	$-8, %edx		# len < 8?
	jl		Left1			# if so, goto Done:
Loop1:
	mrmovl	(%ebx), %esi	# read val from src...
	mrmovl	4(%ebx), %edi	# read val from src...
	rmmovl	%esi, (%ecx)	# ...and store it to dst
	rmmovl	%edi, 4(%ecx)	# ...and store it to dst
	andl	%esi, %esi		# val <= 0?
	jle		Loop2			# if so, goto Loop2
	iaddl	$1, %eax		# count++
Loop2:
	andl	%edi, %edi		# val <= 0?
	jle		Loop3			# if so, goto Loop3
	iaddl	$1, %eax
Loop3:
	mrmovl	8(%ebx), %esi	# read val from src...
	mrmovl	12(%ebx), %edi	# read val from src...
	rmmovl	%esi, 8(%ecx)	# ...and store it to dst
	rmmovl	%edi, 12(%ecx)	# ...and store it to dst
	andl	%esi, %esi		# val <= 0?
	jle		Loop4			# if so, goto Loop4
	iaddl	$1, %eax		# count++
Loop4:
	andl	%edi, %edi		# val <= 0?
	jle		Loop5			# if so, goto Loop5
	iaddl	$1, %eax
Loop5:
	mrmovl	16(%ebx), %esi	# read val from src...
	mrmovl	20(%ebx), %edi	# read val from src...
	rmmovl	%esi, 16(%ecx)	# ...and store it to dst
	rmmovl	%edi, 20(%ecx)	# ...and store it to dst
	andl	%esi, %esi		# val <= 0?
	jle		Loop6			# if so, goto Loop6
	iaddl	$1, %eax		# count++
Loop6:
	andl	%edi, %edi		# val <= 0?
	jle		Loop7			# if so, goto Loop7
	iaddl	$1, %eax
Loop7:
	mrmovl	24(%ebx), %esi	# read val from src...
	mrmovl	28(%ebx), %edi	# read val from src...
	rmmovl	%esi, 24(%ecx)	# ...and store it to dst
	rmmovl	%edi, 28(%ecx)	# ...and store it to dst
	andl	%esi, %esi		# val <= 0?
	jle		Loop8			# if so, goto Loop8
	iaddl	$1, %eax		# count++
Loop8:
	andl	%edi, %edi		# val <= 0?
	jle		Update			# if so, goto Update
	iaddl	$1, %eax
Update:
	iaddl	$32, %ebx		# src += 8
	iaddl	$32, %ecx		# dst += 8
	iaddl	$-8, %edx		# len < 8?
	jge		Loop1			# if so, goto Loop1
Left1:
	iaddl	$8, %edx		# len +8 back for which -8 at Update
	jle		Done			# if len <= 0, done
	mrmovl	(%ebx), %esi	# read val from src...
	iaddl	$4, %ebx		# src++
	rmmovl	%esi, (%ecx)	# ...and store it to dst
	iaddl	$4, %ecx		# dst++
	andl	%esi, %esi		# val <= 0?
	jle		Left2			# if so, goto Left2
	iaddl	$1, %eax		# count++
Left2:
	iaddl	$-1, %edx		# len <= 0?
	jle		Done			# if so, done
	mrmovl	(%ebx), %esi	# read val from src...
	iaddl	$4, %ebx		# src++
	rmmovl	%esi, (%ecx)	# ...and store it to dst
	iaddl	$4, %ecx		# dst++
	andl	%esi, %esi		# val <= 0?
	jle		Left3			# if so, goto Left3
	iaddl	$1, %eax		# count++
Left3:
    iaddl	$-1, %edx		# len <= 0?
	jle		Done			# if so, done
	mrmovl	(%ebx), %esi	# read val from src...
	iaddl	$4, %ebx		# src++
	rmmovl	%esi, (%ecx)	# ...and store it to dst
	iaddl	$4, %ecx		# dst++
	andl	%esi, %esi		# val <= 0?
	jle		Left4			# if so, goto Left4
	iaddl	$1, %eax		# count++
Left4:
	iaddl	$-1, %edx		# len <= 0?
	jle		Done			# if so, done
	mrmovl	(%ebx), %esi	# read val from src...
	iaddl	$4, %ebx		# src++
	rmmovl	%esi, (%ecx)	# ...and store it to dst
	iaddl	$4, %ecx		# dst++
	andl	%esi, %esi		# val <= 0?
	jle		Left5			# if so, goto Left5
	iaddl	$1, %eax		# count++
Left5:
	iaddl	$-1, %edx		# len <= 0?
	jle		Done			# if so, done
	mrmovl	(%ebx), %esi	# read val from src...
	iaddl	$4, %ebx		# src++
	rmmovl	%esi, (%ecx)	# ...and store it to dst
	iaddl	$4, %ecx		# dst++
	andl	%esi, %esi		# val <= 0?
	jle		Left6			# if so, goto Left6
	iaddl	$1, %eax		# count++
Left6:
	iaddl	$-1, %edx		# len <= 0?
	jle		Done			# if so, done
	mrmovl	(%ebx), %esi	# read val from src...
	iaddl	$4, %ebx		# src++
	rmmovl	%esi, (%ecx)	# ...and store it to dst
	iaddl	$4, %ecx		# dst++
	andl	%esi, %esi		# val <= 0?
	jle		Left7			# if so, goto Left7
	iaddl	$1, %eax		# count++
Left7:
	iaddl	$-1, %edx		# len <= 0?
	jle		Done			# if so, done
	mrmovl	(%ebx), %esi	# read val from src...
	rmmovl	%esi, (%ecx)	# ...and store it to dst
	andl	%esi, %esi		# val <= 0?
	jle		Done			# if so, goto Done
	iaddl	$1, %eax		# count++

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
